{"version":3,"sources":["EditMenu.jsx","initialConfig.js","Tiergarten.jsx","App.js","index.js"],"names":["LargeEmoji","children","className","EditMenu","props","Object","entries","config","participantTypes","map","participantType","typeConfig","onClick","handleClick","emoji","label","state","initialConfig","rabbit","requirements","legs","shirts","cricket","octopus","materialNames","persons","inverseMatrix","participantTypesToMatrix","jStat","material","transpose","fixValue","value","Math","floor","guessCounts","values","participantsVectorToState","multiply","valuesToMaterialsVector","toArray","GuessCountsForm","useState","fromEntries","keys","setValues","handleChange","event","newValues","assign","target","name","class","onSubmit","guessedCounts","console","log","updateValues","preventDefault","count","type","min","required","placeholder","materialCounts","onChange","getMaterialCounts","materialsVectorToValues","stateToParticipantsVector","Tiergarten","participantPropsByType","handleDelete","participants","reduce","result","concat","Array","from","key","data-tooltip","alt","makeParticipantsForType","content","length","buildInitialState","reducer","action","nextState","App","useReducer","dispatch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.34b964d6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst LargeEmoji = ({children}) => (\n  <div className=\"large-emoji\">{children}</div>\n)\n\nconst EditMenu = (props) => (\n  <div className=\"ui labeled icon compact menu\">{\n    Object.entries(props.config.participantTypes)\n    .map(([participantType, typeConfig]) => (\n      <a\n        key={participantType}\n        className={`item add-{participantType}`}\n        onClick={props.handleClick(participantType)}\n      >\n        <LargeEmoji>{typeConfig.emoji}</LargeEmoji>\n        {typeConfig.label}\n        <div className=\"ui top right attached label\">\n          {props.state[participantType]}\n        </div>\n      </a>\n    ))\n  }</div>\n);\n\nexport default EditMenu;\n","const initialConfig = {\n  participantTypes: {\n    rabbit: {\n      label: \"Hase\",\n      emoji: \"🐇\",\n      requirements: {\n        legs: 4,\n        shirts: 1\n      }\n    },\n    cricket: {\n      label: \"Grille\",\n      emoji: \"🦗\",\n      requirements: {\n        legs: 6,\n        shirts: 0\n      }\n    },\n    octopus: {\n      label: \"Oktopus\",\n      emoji: \"🐙\",\n      requirements: {\n        legs: 8,\n        shirts: 0\n      }\n    },\n  }\n};\n\nexport default initialConfig;\n","import React, { useState } from \"react\";\nimport { jStat } from \"jstat\";\n\nconst makeParticipantsForType = (participantType, count, typeConfig, props) =>\n  Array.from(Array(count).entries()).map(([key, __]) => (\n    <a\n      key={participantType + key}\n      data-tooltip=\"entfernen\"\n      alt={typeConfig.label}\n      {...props}\n    >\n      {typeConfig.emoji}\n    </a>\n  ));\n\nconst materialNames = {\n  persons: \"Stirnbänder\",\n  legs: \"Socken\",\n  shirts: \"T-Shirts (leider nur für Hasen)\"\n};\n\nconst inverseMatrix = [\n  // only works for the default config\n  [0, 0, 1],\n  [4, -0.5, -2],\n  [-3, 0.5, 1]\n];\n\nconst materialsVectorToValues = ([persons, legs, shirts]) => ({\n  persons,\n  legs,\n  shirts\n});\n\nconst valuesToMaterialsVector = values => jStat([\n  values.persons,\n  values.legs,\n  values.shirts\n]).transpose();\n\nconst participantsVectorToState = ([rabbit, cricket, octopus]) => ({\n  rabbit,\n  cricket,\n  octopus\n});\n\nconst stateToParticipantsVector = state => jStat([\n  state.rabbit,\n  state.cricket,\n  state.octopus\n]).transpose();\n\nconst participantTypesToMatrix = participantTypes =>\n  jStat(\n    [\"rabbit\", \"cricket\", \"octopus\"].map(participantType => {\n      const requirements = participantTypes[participantType].requirements;\n      return [\"persons\", \"legs\", \"shirts\"].map(material =>\n        material === \"persons\" ? 1 : requirements[material]\n      );\n    })\n  ).transpose();\n\nconst fixValue = value => (value < 0 ? 0 : Math.floor(value));\n\nconst guessCounts = values =>\n  participantsVectorToState(\n    jStat(inverseMatrix)\n      .multiply(valuesToMaterialsVector(values))\n      .toArray()\n      .map(fixValue)\n  );\n\nconst GuessCountsForm = props => {\n  const [values, setValues] = useState(() =>\n    Object.fromEntries(\n      Object.keys(materialNames).map(material => [material, \"\"])\n    )\n  );\n\n  const handleChange = event => {\n    const newValues = Object.assign({}, values);\n    newValues[event.target.name] = event.target.value;\n    setValues(newValues);\n  };\n\n  const handleSubmit = event => {\n    const guessedCounts = guessCounts(values);\n    console.log(\"submit\", values, guessedCounts);\n    props.updateValues(guessedCounts);\n    event.preventDefault();\n  };\n\n  return (\n    <form class=\"ui form\" onSubmit={handleSubmit}>\n      <div class=\"fields\">\n        {Object.entries(values).map(([material, count]) => (\n          <div class=\"field\" key={material}>\n            <label>{materialNames[material]}</label>\n            <input\n              type=\"number\"\n              min=\"0\"\n              required\n              name={material}\n              placeholder={props.materialCounts[material]}\n              value={count}\n              onChange={handleChange}\n            />\n          </div>\n        ))}\n      </div>\n      <button class=\"ui button\" type=\"submit\">\n        Teilnehmer*innenzahlen erraten\n      </button>\n    </form>\n  );\n};\n\nconst getMaterialCounts = (state, participantTypes) =>\n  materialsVectorToValues(\n    participantTypesToMatrix(participantTypes)\n      .multiply(stateToParticipantsVector(state))\n      .toArray()\n      .map(Math.floor)\n  );\n\nconst Tiergarten = props => {\n  const participantTypes = props.config.participantTypes;\n  console.log(\"mat\", participantTypesToMatrix(participantTypes));\n  const materialCounts = getMaterialCounts(props.state, participantTypes);\n  const participantPropsByType = {\n    rabbit: { onClick: props.handleDelete(\"rabbit\") },\n    cricket: { onClick: props.handleDelete(\"cricket\") },\n    octopus: { onClick: props.handleDelete(\"octopus\") }\n  };\n  const participants = Object.entries(props.state).reduce(\n    (result, [participantType, count]) =>\n      result.concat(\n        makeParticipantsForType(\n          participantType,\n          count,\n          participantTypes[participantType],\n          participantPropsByType[participantType]\n        )\n      ),\n    []\n  );\n  const content = participants.length ? participants : \"leerer Tiergarten…\";\n  return (\n    <>\n      <div class=\"ui card\">\n        <div class=\"image\">\n          <div class=\"tiergarten\">{content}</div>\n        </div>\n        <div class=\"content\">\n          <h2 class=\"header\">Benötigte Materialien</h2>\n          {Object.entries(materialCounts).map(([material, count]) => (\n            <div class=\"ui tiny horizontal statistic\" key={material}>\n              <div class=\"value\">{count}</div>\n              <div class=\"label\">{materialNames[material]}</div>\n            </div>\n          ))}\n        </div>\n        <div class=\"content\">\n          <h2 class=\"header\">Materialien schon da?</h2>\n          <GuessCountsForm\n            materialCounts={materialCounts}\n            updateValues={props.updateValues}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Tiergarten;\n","import React, { useReducer, useState } from \"react\";\nimport EditMenu from \"./EditMenu\";\nimport initialConfig from \"./initialConfig\";\nimport Tiergarten from \"./Tiergarten\";\nimport \"./style.css\";\nimport \"fomantic-ui-css/semantic.css\";\n\nconst buildInitialState = (config) => Object.fromEntries(\n  Object.keys(config.participantTypes)\n  .map(participantType => [participantType, 0])\n);\n\nconst reducer = (state, action) => {\n  const nextState = Object.assign({}, state);\n  switch(action.type) {\n    case \"update\":\n      Object.assign(nextState, action.values);\n      return nextState;\n    case \"add\":\n      nextState[action.participantType] += 1;\n      return nextState;\n    case \"delete\":\n      nextState[action.participantType] -= 1;\n      return nextState;\n  }\n};\n\nconst App = () => {\n  const [config, setConfig] = useState(initialConfig);\n  const [state, dispatch] = useReducer(reducer, config, buildInitialState);\n  const updateValues = values => {\n    dispatch({ type: \"update\", values })\n  };\n  const handleAdd = participantType => event => {\n    dispatch({ type: \"add\", participantType });\n    console.log(state);\n  };\n  const handleDelete = participantType => event => {\n    dispatch({ type: \"delete\", participantType });\n    console.log(state);\n  };\n  return (\n    <div className=\"ui container\">\n      <h1 className=\"ui header\">Tiergarten</h1>\n      <p className=\"ui info message\">\n        Klick auf die Teilnehmer*innen-Knöpfe, damit sie in den Tiergarten\n        kommen!\n      </p>\n      <EditMenu\n        config={config}\n        state={state}\n        handleClick={handleAdd}\n      />\n      <Tiergarten\n        config={config}\n        state={state}\n        updateValues={updateValues}\n        handleDelete={handleDelete}\n      />\n    </div>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}